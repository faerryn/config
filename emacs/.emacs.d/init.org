#+startup: indent content
* Packages
** Package.el
#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+end_src
** Use-Package
#+begin_src emacs-lisp
  (eval-when-compile
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package))
#+end_src
* Aesthetics
** Clean Up
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default
   inhibit-splash-screen t
   mode-line-format nil
   truncate-lines t)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-vibrant t))
  (global-hl-line-mode +1)
  (global-prettify-symbols-mode +1)
  (setq-default display-line-numbers 'visual)
#+end_src
* Evil Mode
** Vim
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq-default
     evil-want-C-i-jump (display-graphic-p)
     evil-want-C-u-delete t
     evil-want-C-u-scroll t
     evil-want-Y-yank-to-eol t
     evil-want-keybinding nil)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-define-key '(normal visual) 'global
      "s" nil 
      "S" nil 
      (kbd "SPC") nil
      "Q" "@@")
    (evil-mode +1))
  (use-package evil-collection
    :ensure t
    :after (evil)
    :config
    (evil-collection-init))
#+end_src
** Goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :ensure t
    :after (evil)
    :config (evil-goggles-mode +1))
#+end_src
** Commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :after (evil)
    :config (evil-commentary-mode +1))
#+end_src
** Surround
#+begin_src emacs-lisp
  (use-package evil-surround 
    :ensure t
    :after (evil) 
    :config
    (setq-default evil-surround-pairs-alist
                  '((?\( . ("(" . ")"))
                    (?\) . ("(" . ")"))
                    (?b . ("(" . ")"))
                    (?\{ . ("{" . "}"))
                    (?\} . ("{" . "}"))
                    (?B . ("{" . "}"))
                    (?\[ . ("[" . "]"))
                    (?\] . ("[" . "]"))
                    (?r . ("[" . "]"))
                    (?< . ("<" . ">"))
                    (?> . ("<" . ">"))))
    (evil-define-key '(normal visual) 'global "sa" #'evil-surround-region)
    (evil-define-key 'normal 'global 
      "sd" #'evil-surround-delete
      "sr" #'evil-surround-change))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq-default
     org-src-tab-acts-natively t
     org-log-done t)
    (add-hook 'org-mode-hook #'org-toggle-pretty-entities))
  (use-package evil-org
    :ensure t
    :after (evil org)
    :config
    (add-hook 'org-mode-hook #'evil-org-mode)
    (add-hook 'org-mode-hook (lambda () (setq evil-auto-indent nil)))
    (add-hook 'evil-org-mode-hook #'evil-org-set-key-theme))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
  (use-package evil-magit
    :ensure t
    :after (evil magit)
    :config (evil-define-key 'normal 'global (kbd "SPC g") #'magit))
#+end_src
* Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq ivy-count-format "(%d/%d) ")
    (counsel-mode +1))
  (use-package counsel-fd
    :ensure t
    :after (counsel evil)
    :config
    (evil-define-key 'normal 'global 
      (kbd "SPC f") #'counsel-fd-file-jump
      (kbd "SPC c") #'counsel-fd-dired-jump))
#+end_src
* Languages
** Lisp
#+begin_src emacs-lisp
  (use-package lispyville
    :ensure t
    :after (lispy)
    :config (lispyville-set-key-theme '(operators))
    (add-hook 'lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode))
  (use-package lispy
    :ensure t
    :functions evil-collection-lispy-set-key-theme
    :config (evil-collection-lispy-set-key-theme '(paredit c-digits))
    (add-hook 'lisp-mode-hook #'lispy-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
    (add-hook 'lispy-mode-hook (lambda () (evil-commentary-mode -1))))
#+end_src
** Zig
#+begin_src emacs-lisp
  (use-package zig-mode :ensure t)
#+end_src
* Sundry
#+begin_src emacs-lisp
  (setq-default vc-follow-symlinks t
                custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src
