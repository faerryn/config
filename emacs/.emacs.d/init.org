#+startup: indent content
* Packages
** Add package sources
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list
   'package-archives
   '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list
   'package-archives
   '("org" . "https://orgmode.org/elpa/") t)
#+end_src
** Load use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+end_src
* Aesthetics
** Clean UI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default inhibit-splash-screen t)
  (setq-default mode-line-format nil)
  (setq-default truncate-lines t)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-vibrant t))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers 'visual)
  (global-hl-line-mode +1)
#+end_src
** Prettify
#+begin_src emacs-lisp
  (global-prettify-symbols-mode +1)
#+end_src
* Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq-default evil-want-C-u-delete t)
    (setq-default evil-want-C-u-scroll t)
    (setq-default evil-want-Y-yank-to-eol t)
    (setq-default evil-want-integration t)
    (setq-default evil-want-keybinding nil)
    (setq-default evil-want-C-i-jump (display-graphic-p))
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-define-key 'normal 'global "Q" "@@")
    (evil-mode +1))
  (use-package evil-goggles
    :ensure t
    :after (evil)
    :config (evil-goggles-mode +1))
  (use-package evil-matchit
    :ensure t
    :after (evil)
    :config (global-evil-matchit-mode +1))
  (use-package evil-commentary
    :ensure t
    :after (evil)
    :config (evil-commentary-mode +1))
  (use-package evil-surround 
    :ensure t
    :after (evil) 
    :config (evil-define-key '(normal visual) 'global "s" nil) 
    (evil-define-key '(normal visual) 'global "S" nil) 
    (evil-define-key '(normal visual) 'global "sa"
      #'evil-surround-region) 
    (evil-define-key 'normal 'global "sd" #'evil-surround-delete) 
    (evil-define-key 'normal 'global "sr" #'evil-surround-change))
  (use-package evil-collection
    :ensure t
    :after (evil)
    :config (evil-collection-init))
  (use-package evil-org
    :ensure t
    :after (evil org)
    :config
    (add-hook 'org-mode-hook #'evil-org-mode)
    (add-hook 'org-mode-hook (lambda () (setq evil-auto-indent nil)))
    (add-hook 'evil-org-mode-hook #'evil-org-set-key-theme))
  (use-package evil-magit
    :ensure t
    :after (magit evil))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq-default org-catch-invisible-edits 'smart)
    (setq-default org-src-tab-acts-natively t)
    (add-hook 'org-mode-hook #'org-toggle-pretty-entities))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit)
    :config
    (autoload 'magit "magit" nil t))
#+end_src
* Ivy
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode +1))
#+end_src
* Languages
** Zig
#+begin_src emacs-lisp
  (use-package zig-mode :ensure t)
#+end_src
** Lisp
#+begin_src emacs-lisp
  (use-package
    lispyville
    :ensure t
    :after (lispy)
    :config (lispyville-set-key-theme '(operators))
    (add-hook 'lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode))
  (use-package
    lispy
    :ensure t
    :config (evil-collection-lispy-set-key-theme '(paredit c-digits))
    (add-hook 'lisp-mode-hook #'lispy-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispy-mode))
#+end_src
* Custom
#+begin_src emacs-lisp
  (setq-default custom-file
                (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file :noerror)
#+end_src
