#+startup: indent content
* Packages
** Load newer lisps
#+begin_src emacs-lisp
  (setq-default load-prefer-newer t)
#+end_src
** Add package sources
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives 
               '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives 
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives 
               '("org" . "https://orgmode.org/elpa/") t)
#+end_src
** Load use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+end_src
* Aesthetics
** Clean UI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default truncate-lines t)
  (setq-default inhibit-splash-screen t)
#+end_src
** Mouse scroll
#+begin_src emacs-lisp
  (setq-default mouse-wheel-scroll-amount '(1))
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package darktooth-theme
    :ensure t
    :config (load-theme 'darktooth t))
#+end_src
** Minions
#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :config (minions-mode +1))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers 'visual)
  (global-hl-line-mode +1)
#+end_src
** Prettify-symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode +1)
#+end_src
* Evil Mode
** Emulate vim
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq-default evil-want-integration t)
    (setq-default evil-want-keybinding nil)
    (setq-default evil-want-C-u-delete t)
    (setq-default evil-want-C-u-scroll t)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (setq-default evil-want-Y-yank-to-eol t)
    (add-hook 'org-mode-hook (lambda () (setq evil-auto-indent nil)))
    (evil-mode +1))
  (use-package evil-goggles
    :ensure t
    :after (evil)
    :config (evil-goggles-mode +1))
  (use-package undo-tree
    :ensure t
    :config
    (setq-default undo-tree-auto-save-history t)
    (setq
     undo-tree-history-directory-alist
     `(("." . ,(expand-file-name "undo-tree" user-emacs-directory))))
    (global-undo-tree-mode +1))
  (use-package evil-commentary
    :ensure t
    :after (evil)
    :config (evil-commentary-mode +1))
  (use-package evil-matchit
    :ensure t
    :after (evil)
    :config (global-evil-matchit-mode +1))
#+end_src
** Compatibility
#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after (evil)
    :config (evil-collection-init))
  (use-package evil-org
    :ensure t
    :after (evil org)
    :config
    (add-hook 'org-mode-hook #'evil-org-mode)
    (add-hook 'evil-org-mode-hook #'evil-org-set-key-theme)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  (use-package evil-magit
    :ensure t
    :after (magit evil))
#+end_src
* Languages
** Zig
#+begin_src emacs-lisp
  (use-package zig-mode :ensure t)
#+end_src
** Lisp
#+begin_src emacs-lisp
  (use-package lispyville
    :ensure t
    :after (lispy)
    :config
    (lispyville-set-key-theme '(operators))
    (add-hook 'lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode))
  (use-package lispy
    :ensure t
    :config
    (evil-collection-lispy-set-key-theme '(paredit c-digits))
    (add-hook 'lisp-mode-hook #'lispy-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispy-mode))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq-default org-catch-invisible-edits 'smart)
    (setq-default org-src-tab-acts-natively t)
    (add-hook 'org-mode-hook #'org-toggle-pretty-entities))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config (global-set-key (kbd "C-c g") #'magit))
#+end_src
* EXWM
#+begin_src emacs-lisp
  (use-package exwm :ensure t)
#+end_src
* Sundry
** Clean FS
#+begin_src emacs-lisp
  (setq-default auto-save-default nil)
  (setq-default backup-inhibited t)
#+end_src
** Load Custom file
#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file :noerror)
#+end_src
** Emacs Server
#+begin_src emacs-lisp
  (when (daemonp) (server-start))
#+end_src
