#+title: Emacs Literate Config
#+author: Faerryn
#+email: alexandre.liao@gmail.com
#+startup: content

* Vanilla Config
stuff that don't need packages
** Disable Scrollbar
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src
** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Monospace-12"))
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers-type 'relative)
  (global-display-line-numbers-mode +1)
#+end_src
** Org Mode
#+begin_src emacs-lisp
  (setq-default org-src-tab-acts-natively t)
  (add-hook 'org-mode-hook (lambda () (org-indent-mode +1)))
#+end_src
* Boostrap Packaging System
** straight.el
#+begin_src emacs-lisp
  (setq-default straight-use-package-by-default t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** use-package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
* Packages Config
** gcmh
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (add-hook 'emacs-startup-hook (lambda () (gcmh-mode +1))))
#+end_src
** gruvbox
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq-default
     doom-themes-enable-bold t
     doom-themes-enable-italic t)
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src
** evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq-default
     evil-want-integration t
     evil-want-keybinding nil
     evil-want-Y-to-eol t)
    :config
    (evil-mode +1)
    (evil-define-key '(normal visual) 'global
      (kbd "s") nil
      (kbd "S") nil))
#+end_src
** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :after evil
    :hook (org-mode . (lambda () (evil-org-mode +1)))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :config
    (ivy-mode +1))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
