#+startup: indent
* Packages
** Load newer lisps
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src
** Add package sources
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives 
               '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives 
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives 
               '("org" . "https://orgmode.org/elpa/") t)
#+end_src
** Load use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+end_src
* Aesthetics
** Clean UI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen t)
#+end_src
** Maximized on start
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Slower mouse scroll
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1))
#+end_src
** Doom Vibrant Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-vibrant t))
#+end_src
** Pretty Modeline
*** Moody
#+begin_src emacs-lisp
  (defun personal-moody-fix-height (&optional frame) 
    (with-selected-frame (if frame (identity frame) (selected-frame))
      (setq moody-mode-line-height (line-pixel-height))))
  (use-package moody
    :ensure t
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (when (display-graphic-p)
      (add-hook 'after-setting-font-hook #'personal-moody-fix-height)
      (if (daemonp)
          (add-hook 'after-make-frame-functions
                    #'personal-moody-fix-height)
        (personal-moody-fix-height))))
#+end_src
*** Minions
#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :config (minions-mode +1))
#+end_src
** Relative line numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers 'relative)
  (global-hl-line-mode +1)
#+end_src
** Prettify-symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode +1)
#+end_src
* Evil
** Emulate vim
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (setq evil-want-C-u-delete t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-Y-yank-to-eol t)
    (add-hook 'org-mode-hook (lambda () (setq evil-auto-indent nil)))
    (evil-mode +1))
  (use-package evil-goggles
    :ensure t
    :after (evil)
    :config (evil-goggles-mode +1))
  (use-package evil-surround
    :ensure t
    :after (evil)
    :config (global-evil-surround-mode +1))
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history t)
    (setq
     undo-tree-history-directory-alist
     `(("." . ,(expand-file-name "undo-tree" user-emacs-directory))))
    (global-undo-tree-mode +1))
#+end_src
** Emulate vim plugins
#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :after (evil)
    :config (evil-commentary-mode +1))
  (use-package evil-matchit
    :ensure t
    :after (evil)
    :config (global-evil-matchit-mode +1))
  (use-package evil-exchange
    :ensure t
    :after (evil)
    :config (evil-exchange-install))
#+end_src
** Compatibility
#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after (evil)
    :config (evil-collection-init))
  (use-package evil-org
    :ensure t
    :after (evil org)
    :config
    (add-hook 'org-mode-hook #'evil-org-mode)
    (add-hook 'evil-org-mode-hook #'evil-org-set-key-theme)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  (use-package evil-magit
    :ensure t
    :after (magit evil))
#+end_src
* Completion
** Ivy
#+begin_src emacs-lisp
  (defun personal-ivy-emulate-fzf ()
    "Emulates the behavior of FZF"
    (interactive)
    (ivy-read
     "Find file: "
     (split-string (shell-command-to-string
                    (getenv "FZF_DEFAULT_COMMAND")))
     :action #'find-file))
  (use-package ivy
    :ensure t
    :config
    (setq ivy-count-format "(%d/%d) ")
    (global-set-key (kbd "C-c f") #'personal-ivy-emulate-fzf)
    (ivy-mode +1))
#+end_src
** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after (ivy)
    :config
    (counsel-mode +1))
#+end_src
** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper-isearch)
    :ensure t
    :after (ivy))
#+end_src
* Org mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-src-tab-acts-natively t))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status))
#+end_src
* Programming
** Languages
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode :ensure t)
#+end_src
*** Zig
#+begin_src emacs-lisp
  (use-package zig-mode :ensure t)
#+end_src
*** Lisp
#+begin_src emacs-lisp
  (use-package lispyville
    :ensure t
    :after (lispy)
    :config
    (lispyville-set-key-theme '(operators))
    (add-hook 'lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode))
  (use-package lispy
    :ensure t
    :config
    (evil-collection-lispy-set-key-theme '(evil paredit c-digits))
    (add-hook 'lisp-mode-hook #'lispy-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispy-mode))
#+end_src
** Eglot
#+begin_src emacs-lisp
  (defun personal-lsp-setup () 
    (eglot-ensure)
    (add-hook 'before-save-hook #'eglot-format-buffer nil t)
    (add-hook 'eglot-managed-mode-hook #'evil-force-normal-state nil t))
  (use-package eglot
    :ensure t
    :pin melpa-stable
    :after (company yasnippet markdown-mode)
    :config
    (setq eglot-server-programs 
          '((rust-mode . ("rust-analyzer")) 
            (c++-mode . ("clangd" "--background-index"))))
    (add-hook 'rust-mode-hook #'personal-lsp-setup)
    (add-hook 'c++-mode-hook #'personal-lsp-setup))
  (use-package company :ensure t)
  (use-package yasnippet :ensure t)
  (use-package markdown-mode :ensure t)
#+end_src
* Sundry
** Clean FS
#+begin_src emacs-lisp
  (setq auto-save-default nil)
  (setq backup-inhibited t)
  (setq create-lockfiles nil)
#+end_src
** Follow symlinks
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** Load Custom file
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file :noerror)
#+end_src
** Emacs Server
#+begin_src emacs-lisp
  (when (daemonp) (server-start))
#+end_src
