* Packages
** Package.el
#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+end_src
** Use-Package
#+begin_src emacs-lisp
  (eval-when-compile
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package))
#+end_src
* Aesthetics
** Clean Slate
#+begin_src emacs-lisp
  (setq-default inhibit-startup-screen t
                inhibit-startup-echo-area-message t
                initial-scratch-message nil
                initial-major-mode 'org-mode
                mode-line-format nil
                line-spacing 0)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (fringe-mode '(0 . 0))
  (require 'dired-x)
  (add-hook 'dired-mode-hook 'dired-omit-mode)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-vibrant t))
  (global-hl-line-mode +1)
  (global-prettify-symbols-mode +1)
  (setq-default display-line-numbers "relative")
#+end_src
* Vim Bindings
** Undotree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (setq-default undo-tree-auto-save-history t
                  undo-tree-history-directory-alist 
                  `(("." . ,(expand-file-name "undo" user-emacs-directory))))
    (add-hook 'undo-tree-visualizer-mode-hook 
              (lambda ()
                (undo-tree-visualizer-selection-mode +1)
                (setq display-line-numbers nil)))
    (global-undo-tree-mode +1))
#+end_src
** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :after (undo-tree)
    :init
    (setq-default
     evil-want-C-i-jump (display-graphic-p)
     evil-want-C-u-delete t
     evil-want-C-u-scroll t
     evil-want-Y-yank-to-eol t
     evil-want-keybinding nil)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-define-key '(normal visual) 'global
      "s" nil 
      "S" nil 
      "Q" "@@")
    (global-set-key (kbd "C-c v") #'evil-mode)
    (evil-mode +1))
#+end_src
** Evil Bindings
*** Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after (evil)
    :config
    (evil-collection-init))
#+end_src
*** Org
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after (evil org)
    :config
    (add-hook 'org-mode-hook #'(lambda ()
                                 (setq evil-auto-indent nil)
                                 (evil-org-mode +1)))
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
*** Magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :ensure t
    :after (evil magit))
#+end_src
** Plugins
*** Goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :ensure t
    :after (evil)
    :init
    (setq-default evil-goggles-duration 0.500) ;; default is 0.200
    :config (evil-goggles-mode +1))
#+end_src
* Majors
** Lisp
#+begin_src emacs-lisp
  (use-package lispyville
    :ensure t
    :after (lispy)
    :config (lispyville-set-key-theme '(operators))
    (add-hook 'lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode))
  (use-package lispy
    :ensure t
    :functions evil-collection-lispy-set-key-theme
    :config (evil-collection-lispy-set-key-theme '(paredit c-digits))
    (add-hook 'lisp-mode-hook #'lispy-mode)
    (add-hook 'emacs-lisp-mode-hook #'lispy-mode))
#+end_src
** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t
    :init (setq-default zig-format-on-save t))
#+end_src
** Org
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq-default
     org-src-tab-acts-natively t
     org-startup-indented t
     org-log-done t
     org-agenda-files (list "~/org/agenda.org" "~/School/agenda.org") 
     org-agenda-start-on-weekday 0
     org-hide-emphasis-markers t
     org-confirm-elisp-link-function nil)
    (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (add-hook 'org-mode-hook (lambda ()
                               (org-toggle-pretty-entities)
                               (visual-line-mode +1))))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config (global-set-key (kbd "C-c g") #'magit-status))
#+end_src
* Ivy
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode +1)
    (counsel-mode +1))
#+end_src
* Sundry
#+begin_src emacs-lisp
  (add-hook 'after-init-hook (lambda () (setq-default vc-follow-symlinks t)))
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src
